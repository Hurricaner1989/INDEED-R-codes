rm(list = ls())
rm(list = ls())
getwd()
load("Data/M_GU.RData")
p <- nrow(Met_HCC_GU)
n_HCC <- ncol(Met_HCC_GU)
n_CIRR <- ncol(Met_CIRR_GU)
library("glasso") # need install
source("function.R")
data_CIRR <- scale(t(Met_CIRR_GU)) # n1*p CIRR
data_HCC <- scale(t(Met_HCC_GU)) # n2*p HCC
cov_CIRR <- var(data_CIRR)
cov_HCC <- var(data_HCC)
set.seed(100)
n_fold <- 5 # number of folds
rho = exp(seq(log(0.6), log(0.01), length.out = 20))
error <- choose_rho(data_CIRR, n_fold, rho)
rho[error$log.cv == min(error$log.cv)] # rho based on minimum rule
abline(v = rho[error$log.cv == min(error$log.cv)], col = "red", lty = 3)
abline(h = min(error$log.cv) + error$log.rho[error$log.cv == min(error$log.cv)], col = "blue")
rho
rho_CIRR_opt <- 0.253
pre_CIRR <- glasso(cov_CIRR, rho = rho_CIRR_opt)
rm(n_fold, rho, error)
thres <- 1e-3
sum(abs(pre_CIRR$wi) > thres)
pre_CIRR$wi[1:10, 1:10]
pc_CIRR <- compute_par(pre_CIRR$wi)
sum(abs(pc_CIRR) > thres)
pc_CIRR[1:10, 1:10]
rm(pre_CIRR, thres)
n_fold <- 5 # number of folds
rho = exp(seq(log(0.6), log(0.01), length.out = 20))
error <- choose_rho(data_HCC, n_fold, rho)
rho[error$log.cv == min(error$log.cv)] # rho based on minimum rule
abline(v = rho[error$log.cv == min(error$log.cv)], col = "red", lty = 3)
abline(h = min(error$log.cv) + error$log.rho[error$log.cv == min(error$log.cv)], col = "blue")
rho
rho_HCC_opt <- 0.253
pre_HCC <- glasso(cov_HCC, rho = rho_HCC_opt)
rm(n_fold, rho, error)
thres <- 1e-3
sum(abs(pre_HCC$wi) > thres)
pre_HCC$wi[1:10,1:10]
pc_HCC <- compute_par(pre_HCC$wi)
sum(abs(pc_HCC) > thres)
pc_HCC[1:10,1:10]
rm(pre_HCC, thres)
diff <- pc_CIRR - pc_HCC
thres = 1e-3
sum(abs(diff) > thres)
diff[1:10, 1:10]
load("Data/diff_p_M_GU.RData")
thres_left <- 0.025
thres_right <- 0.975
pc_thres <- permutation_thres(thres_left, thres_right, p, diff_p)
rm(thres_left, thres_right)
pc_thres_p <- pc_thres$positive
pc_thres_n <- pc_thres$negative
pc_binary <- matrix(0, p, p)
pc_binary <- matrix(0, p, p)
pc_binary[diff < pc_thres_n] <- -1
pc_binary[diff > pc_thres_p] <- 1
diff[1:10, 1:10]
pc_weight <- diff[diff < pc_thres_n]
pc_weight[1:10, 1:10]
pc_weight <- matrix(0, p, p)
pc_weight[diff < pc_thres_n] <- diff[diff < pc_thres_n]
pc_weight[1:10, 1:10]
pc_binary[1:10, 1:10]
pc_weight[diff > pc_thres_p] <- diff[diff > pc_thres_p]
sum(diff < pc_thres_n)
sum(diff > pc_thres_p)
pc_binary[1:10, 1:10]
pc_weight[1:10, 1:10]
rowSums(abs(pc_binary)) # node degree for differential networks
rm(diff_p)
edge <- matrix(0, (sum(diff < pc_thres_n) + sum(diff > pc_thres_p)) / 2, 4)
k <- 1
for(i in 1:(nrow(pc_binary) - 1)){
for (j in (i + 1) : nrow(pc_binary)){
if(pc_binary[i, j] != 0){
edge[k, 1] <- i
edge[k, 2] <- j
edge[k, 3] <- pc_binary[i, j]
edge[k, 4] <- pc_weight[i, j]
k <- k + 1
}
}
}
edge_dn <- data.frame("Met1" = edge[, 1], "Met2" = edge[, 2], "Binary" = edge[, 3], "Weight" = edge[, 4])
write.csv(edge_dn, file = "Met_dn.csv", quote = F, row.names = F)
rm(i, j, k, edge, edge_dn, pc_thres, rho_CIRR_opt, rho_HCC_opt, thres)
source("function.R")
diff <- pc_HCC - pc_CIRR # from CIRR to HCC
thres = 1e-3
sum(abs(diff) > thres)
diff[1:10, 1:10]
m <- 1000 # permutation times
diff_p <- permutation(m, p, n_CIRR, n_HCC, data_CIRR, data_HCC, rho_CIRR_opt, rho_HCC_opt)
save(diff_p, file = "Data/diff_p_M_GU.RData")
diff_p <- permutation(m, p, n_CIRR, n_HCC, data_CIRR, data_HCC, rho_CIRR_opt, rho_HCC_opt)
rm(list = ls())
getwd()
load("Data/M_GU.RData")
p <- nrow(Met_HCC_GU)
n_HCC <- ncol(Met_HCC_GU)
n_CIRR <- ncol(Met_CIRR_GU)
library("glasso") # need install
source("function.R")
data_CIRR <- scale(t(Met_CIRR_GU)) # n1*p CIRR
data_HCC <- scale(t(Met_HCC_GU)) # n2*p HCC
cov_CIRR <- var(data_CIRR)
cov_HCC <- var(data_HCC)
set.seed(100)
n_fold <- 5 # number of folds
rho = exp(seq(log(0.6), log(0.01), length.out = 20))
error <- choose_rho(data_CIRR, n_fold, rho)
rho[error$log.cv == min(error$log.cv)] # rho based on minimum rule
abline(v = rho[error$log.cv == min(error$log.cv)], col = "red", lty = 3)
abline(h = min(error$log.cv) + error$log.rho[error$log.cv == min(error$log.cv)], col = "blue")
rho
rho_CIRR_opt <- 0.253
pre_CIRR <- glasso(cov_CIRR, rho = rho_CIRR_opt)
rm(n_fold, rho, error)
thres <- 1e-3
sum(abs(pre_CIRR$wi) > thres)
pre_CIRR$wi[1:10, 1:10]
pc_CIRR <- compute_par(pre_CIRR$wi)
sum(abs(pc_CIRR) > thres)
pc_CIRR[1:10, 1:10]
rm(pre_CIRR, thres)
n_fold <- 5 # number of folds
rho = exp(seq(log(0.6), log(0.01), length.out = 20))
error <- choose_rho(data_HCC, n_fold, rho)
rho[error$log.cv == min(error$log.cv)] # rho based on minimum rule
abline(v = rho[error$log.cv == min(error$log.cv)], col = "red", lty = 3)
abline(h = min(error$log.cv) + error$log.rho[error$log.cv == min(error$log.cv)], col = "blue")
rho
rho_HCC_opt <- 0.253
pre_HCC <- glasso(cov_HCC, rho = rho_HCC_opt)
rm(n_fold, rho, error)
thres <- 1e-3
sum(abs(pre_HCC$wi) > thres)
pre_HCC$wi[1:10,1:10]
pc_HCC <- compute_par(pre_HCC$wi)
sum(abs(pc_HCC) > thres)
pc_HCC[1:10,1:10]
rm(pre_HCC, thres)
diff <- pc_HCC - pc_CIRR # from CIRR to HCC
thres = 1e-3
sum(abs(diff) > thres)
diff[1:10, 1:10]
m <- 1000 # permutation times
diff_p <- permutation(m, p, n_CIRR, n_HCC, data_CIRR, data_HCC, rho_CIRR_opt, rho_HCC_opt)
rm(m, thres, rho_CIRR_opt, rho_HCC_opt)
load("Data/diff_p_M_GU.RData")
thres_left <- 0.025
thres_right <- 0.975
pc_thres <- permutation_thres(thres_left, thres_right, p, diff_p)
rm(thres_left, thres_right)
pc_thres_p <- pc_thres$positive
pc_thres_n <- pc_thres$negative
pc_binary <- matrix(0, p, p) # binary connection
pc_binary[diff < pc_thres_n] <- -1
pc_binary[diff > pc_thres_p] <- 1
pc_weight <- matrix(0, p, p) # weight connection
pc_weight[diff < pc_thres_n] <- diff[diff < pc_thres_n]
pc_weight[diff > pc_thres_p] <- diff[diff > pc_thres_p]
sum(diff < pc_thres_n)
sum(diff > pc_thres_p)
pc_binary[1:10, 1:10]
pc_weight[1:10, 1:10]
rowSums(abs(pc_binary)) # node degree for differential networks
rm(diff_p)
edge <- matrix(0, (sum(diff < pc_thres_n) + sum(diff > pc_thres_p)) / 2, 4)
k <- 1
for(i in 1:(nrow(pc_binary) - 1)){
for (j in (i + 1) : nrow(pc_binary)){
if(pc_binary[i, j] != 0){
edge[k, 1] <- i
edge[k, 2] <- j
edge[k, 3] <- pc_binary[i, j]
edge[k, 4] <- pc_weight[i, j]
k <- k + 1
}
}
}
edge_dn <- data.frame("Met1" = edge[, 1], "Met2" = edge[, 2], "Binary" = edge[, 3], "Weight" = edge[, 4])
write.csv(edge_dn, file = "Met_dn.csv", quote = F, row.names = F)
rm(i, j, k, edge, edge_dn, pc_thres, rho_CIRR_opt, rho_HCC_opt, thres)
mean(Met_CIRR_GU)
?mean
?rowMeans
rowMeans(Met_CIRR_GU)
rowMeans(Met_CIRR_GU) / rowMeans(Met_HCC_GU)
rowMeans(Met_HCC_GU)
View(Met_CIRR_GU)
View(Met_HCC_GU)
rowMeans(Met_HCC_GU) > rowMeans(Met_CIRR_GU)
write.table(rowMeans(Met_HCC_GU) > rowMeans(Met_CIRR_GU), file = "test.csv", sep=",", quote = F,
row.names = F, col.names = F)
